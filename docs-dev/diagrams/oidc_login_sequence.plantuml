@startuml oidc_login_sequence

!theme plain

title OpenID Connect Login Flow

autonumber
autoactivate on

skinparam note {
    BackgroundColor #FFFFBD
}

actor "User Agent\n(Browser)" as UA
activate UA
participant "Frontend Portal" as PORTAL
participant "Identity Provider" as IDP
participant "Flexibility\nInformation System (FIS)\nAuth API" as AUTH

UA -> PORTAL: Visit portal
PORTAL -> AUTH: Check active sessions\nGET /auth/v0/session\n<:cookie:> __Host-flex_session
return No active session\nUnset <:cookie:> __Host-flex_session
return Go to /auth/v0/login

UA -> AUTH: Navigate to /auth/v0/login?return_url=<referer>
AUTH -> IDP: Push authorization request to /par
return Return request_uri
return HTTP 302 Redirect to Identity Provider\nSet <:fortune_cookie:> flex_login w/ nonce, state and return_url

UA -> IDP: Follow redirect\n/authorize?request_uri=<uri>&client_id=<client_id>
note over IDP
    User logs in
end note
return HTTP 302 Redirect to callback url

UA -> AUTH: Follow redirect\n/auth/v0/callback?code=<code>&state=<state>\nInclude <:fortune_cookie:> flex_login
AUTH -> IDP: Request /token\nusing code and code_verifier
return Return access, id and refresh tokens
note over AUTH
    The auth server verifies and inspects
    the ID token to establish the identity.

    Checks:
        - Issuer
        - Audience
        - Signature
        - Expiry
        - Nonce
        - State

end note

return HTTP 302 Redirect to return_url\nSet <:cookie:> __Host-flex_session\nUnset <:fortune_cookie:> flex_login

UA -> PORTAL: Follow redirect to portal
PORTAL -> AUTH: Check active sessions\nGET /auth/v0/session\n<:cookie:> __Host-flex_session
return Session and user details

note over PORTAL
    User is now logged in
    and can assume a party and
    call the main API.
end note
|||
@enduml
