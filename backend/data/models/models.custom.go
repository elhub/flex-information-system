package models

import (
	"context"
	"encoding/json"
)

// MarshallableTechnicalResource takes the fields of technical resource that we
// return from the database in the controllable unit lookup operation, adding
// the right annotations so that the type can be marshalled to JSON.
type MarshallableTechnicalResource struct {
	ID      int     `json:"id"`
	Name    string  `json:"name"`
	Details *string `json:"details,omitempty"`
}

// ControllableUnitLookup turns the internal type generated by sqlc into a clean
// JSON representation that we can return to the client. In particular, we get
// the technical resources as a raw JSON object in the database query but this
// must be embedded in another JSON, so we need to unmarshal it and rename the
// fields here.
type ControllableUnitLookup struct {
	ID                 int                             `json:"id"`
	BusinessID         string                          `json:"business_id"`
	Name               string                          `json:"name"`
	AccountingPointID  string                          `json:"accounting_point_id"`
	EndUserID          int                             `json:"end_user_id"`
	TechnicalResources []MarshallableTechnicalResource `json:"technical_resources"`
}

// ControllableUnitLookup calls the controllable_unit_lookup function in the
// database and turns the result into a readable JSON format.
func (q *Queries) ControllableUnitLookup(
	ctx context.Context,
	endUserID int,
	businessID string,
	accountingPointID string,
) ([]ControllableUnitLookup, error) {
	cuLookupInternalResult, err := q.ControllableUnitLookupInternal(
		ctx, endUserID, businessID, accountingPointID,
	)
	if err != nil {
		return nil, err
	}

	cuLookupResult := []ControllableUnitLookup{}

	for _, cuLookupInternal := range cuLookupInternalResult {
		var technicalResources []MarshallableTechnicalResource
		if len(cuLookupInternal.TechnicalResources) == 0 { // no TR for this CU
			technicalResources = []MarshallableTechnicalResource{}
		} else {
			err = json.Unmarshal(
				cuLookupInternal.TechnicalResources, &technicalResources,
			)
			if err != nil {
				return nil, err //nolint:wrapcheck
			}
		}

		cuLookupResult = append(cuLookupResult, ControllableUnitLookup{
			ID:                 cuLookupInternal.ID,
			BusinessID:         cuLookupInternal.BusinessID,
			Name:               cuLookupInternal.Name,
			AccountingPointID:  cuLookupInternal.AccountingPointID,
			EndUserID:          cuLookupInternal.EndUserID,
			TechnicalResources: technicalResources,
		})
	}

	return cuLookupResult, nil
}
