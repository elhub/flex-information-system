// Code generated by "enumer -type=Verb -transform=lower"; DO NOT EDIT.

package scope

import (
	"fmt"
	"strings"
)

const _VerbName = "readusemanage"

var _VerbIndex = [...]uint8{0, 4, 7, 13}

const _VerbLowerName = "readusemanage"

func (i Verb) String() string {
	i -= 1
	if i < 0 || i >= Verb(len(_VerbIndex)-1) {
		return fmt.Sprintf("Verb(%d)", i+1)
	}
	return _VerbName[_VerbIndex[i]:_VerbIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VerbNoOp() {
	var x [1]struct{}
	_ = x[Read-(1)]
	_ = x[Use-(2)]
	_ = x[Manage-(3)]
}

var _VerbValues = []Verb{Read, Use, Manage}

var _VerbNameToValueMap = map[string]Verb{
	_VerbName[0:4]:       Read,
	_VerbLowerName[0:4]:  Read,
	_VerbName[4:7]:       Use,
	_VerbLowerName[4:7]:  Use,
	_VerbName[7:13]:      Manage,
	_VerbLowerName[7:13]: Manage,
}

var _VerbNames = []string{
	_VerbName[0:4],
	_VerbName[4:7],
	_VerbName[7:13],
}

// VerbString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VerbString(s string) (Verb, error) {
	if val, ok := _VerbNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VerbNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Verb values", s)
}

// VerbValues returns all values of the enum
func VerbValues() []Verb {
	return _VerbValues
}

// VerbStrings returns a slice of all String values of the enum
func VerbStrings() []string {
	strs := make([]string, len(_VerbNames))
	copy(strs, _VerbNames)
	return strs
}

// IsAVerb returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Verb) IsAVerb() bool {
	for _, v := range _VerbValues {
		if i == v {
			return true
		}
	}
	return false
}
