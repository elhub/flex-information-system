server {

    listen       ${NGINX_PORT_PLAIN};
    listen       [::]:${NGINX_PORT_PLAIN};

    server_name  ${NGINX_SERVER_NAME};

    # We generally don't want to redirect to HTTPS in case clients are including sensitive information like credentials.
    # It is better to return an error message to make the client aware.
    # Still, having a redirect on the root path is useful for users who type the URL manually.
    # It is a nice trade-off between security and usability.

    location = / {
        return 301 https://$host:${NGINX_PORT_TLS}$request_uri;
    }

    # For everything else, we return a 404 and let the user decide what to do.
    location / {
        default_type text/html;
        return 404 "<html><body><p>We are only serving content via HTTPS.<br>Try <a href=\"https://$host:${NGINX_PORT_TLS}$request_uri\">https://$host:${NGINX_PORT_TLS}$request_uri</a><p></body></html>";
    }

}

server {
    listen ${NGINX_PORT_TLS} ssl;
    listen [::]:${NGINX_PORT_TLS} ssl;
    http2 on;

    # set_real_ip_from takes the IP address from the X-Real-IP header
    # and sets it as the remote_addr _if_ the remote address is within
    # the specified/trusted IP range.
    set_real_ip_from ${NGINX_REAL_IP_FROM};

    autoindex off;

    server_name ${NGINX_SERVER_NAME};

    ssl_certificate ${NGINX_SSL_CERTIFICATE};
    ssl_certificate_key ${NGINX_SSL_CERTIFICATE_KEY};
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /etc/nginx/dhparam
    ssl_dhparam /etc/nginx/dhparam;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;

    # HSTS
    set $hsts "max-age=15768000";

    if ($host = localhost) {
        set $hsts "max-age=0";
    }

    add_header Strict-Transport-Security $hsts always;

    # CIS 5.3.1 Ensure X-Frame-Options header is configured and enabled
    add_header X-Frame-Options "deny" always;

    # CIS 5.3.2 Ensure X-Content-Type-Options header is configured and enabled
    add_header X-Content-Type-Options "nosniff" always;

    # CIS 5.3.3 Ensure that Content Security Policy (CSP) is enabled and configured properly
    # TODO cdn.jsdelivr.net is used for the OpenAPI UI, but we should consider hosting/bundling it ourselves
    add_header Content-Security-Policy "default-src 'self' data:; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net; font-src 'self' https://fonts.gstatic.com;" always;

    # 5.3.4 Ensure the Referrer Policy is enabled and configured properly (Manual)
    add_header Referrer-Policy "no-referrer" always;

    root /usr/share/nginx/html/flex;
    gzip_static on;

    etag on;
    add_header 'Cache-Control' 'private, must-revalidate';
    expires epoch;

    # Avoiding proxy-pass for some api paths
    location ~ ^/(api|auth)/v0/$ {}
    location ~ ^/(api|auth)/v0/index.html$ {}
    location ~ ^/(api|auth)/v0/openapi.json$ {}

    # Proper API endpoints handed to backend
    location ~ ^/(api/v0/|auth/v0/|readyz$) {

        # Actually do some proxying
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 2.5.4 Ensure the NGINX reverse proxy does not enable information disclosure
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        proxy_pass ${NGINX_UPSTREAM_BACKEND};

    }

}
