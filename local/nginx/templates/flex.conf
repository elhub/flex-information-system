server {

    listen       ${NGINX_PORT_PLAIN};
    listen       [::]:${NGINX_PORT_PLAIN};

    server_name  ${NGINX_SERVER_NAME};

    # We generally don't want to redirect to HTTPS in case clients are including sensitive information like credentials.
    # It is better to return an error message to make the client aware.
    # Still, having a redirect on the root path is useful for users who type the URL manually.
    # It is a nice trade-off between security and usability.

    location = / {
        return 301 https://$host:${NGINX_PORT_TLS}$request_uri;
    }

    # For everything else, we return a 404 and let the user decide what to do.
    location / {
        default_type text/html;
        return 404 "<html><body><p>We are only serving content via HTTPS.<br>Try <a href=\"https://$host:${NGINX_PORT_TLS}$request_uri\">https://$host:${NGINX_PORT_TLS}$request_uri</a><p></body></html>";
    }

}

server {
    listen ${NGINX_PORT_TLS} ssl;
    listen [::]:${NGINX_PORT_TLS} ssl;
    http2 on;

    autoindex off;

    server_name ${NGINX_SERVER_NAME};

    ssl_certificate ${NGINX_SSL_CERTIFICATE};
    ssl_certificate_key ${NGINX_SSL_CERTIFICATE_KEY};
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /etc/nginx/dhparam
    ssl_dhparam /etc/nginx/dhparam;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;

    # HSTS
    set $hsts "max-age=15768000";

    if ($host = localhost) {
        set $hsts "max-age=0";
    }

    add_header Strict-Transport-Security $hsts always;

    # CIS 5.3.1 Ensure X-Frame-Options header is configured and enabled
    add_header X-Frame-Options "deny" always;

    # CIS 5.3.2 Ensure X-Content-Type-Options header is configured and enabled
    add_header X-Content-Type-Options "nosniff" always;

    # CIS 5.3.3 Ensure that Content Security Policy (CSP) is enabled and configured properly
    # TODO unpkg.com is used for the OpenAPI UI, but we should consider hosting/bundling it ourselves
    add_header Content-Security-Policy "default-src 'self' data:; script-src 'self' https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://unpkg.com; font-src 'self' https://fonts.gstatic.com;" always;

    # 5.3.4 Ensure the Referrer Policy is enabled and configured properly (Manual)
    add_header Referrer-Policy "no-referrer" always;

    root /usr/share/nginx/html/flex;
    gzip_static on;

    # /docs/ is where we serve the mkdocs documentation
    location /docs/ {
        add_header 'Cache-Control' 'private, max-age=1200, must-revalidate';
    }

    # Serving Elements OpenAPI documentation
    # on /api/v0/
    location = /api/v0/ {
        add_header 'Cache-Control' 'no-cache';
    }

    location = /api/v0/index.html {
        add_header 'Cache-Control' 'no-cache';
    }

    location = /api/v0/openapi.json {
        add_header 'Cache-Control' 'no-cache';
    }

    location /api/v0/ {

        set $accept $http_accept;
        set $prefer $http_prefer;

        if ($request_method = POST) {
            # Ensures singular when object is created and that we only return the regular application/json Content-Type
            # https://postgrest.org/en/v11/references/resource_representation.html#singular-or-plural
            set $accept 'application/vnd.pgrst.object+json';

            # Ensures that object is returned on insert and update
            # https://postgrest.org/en/latest/references/preferences.html#prefer-return
            set $prefer 'return=representation';
        }

        proxy_set_header Prefer $prefer;
        proxy_set_header Accept $accept;

        proxy_hide_header Content-Type;
        add_header Content-Type 'application/json' always;

        # Actually do some proxying
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 2.5.4 Ensure the NGINX reverse proxy does not enable information disclosure
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # Singular "by ID" endpoint rewrite
        # This is because PostgREST does not support singular endpoints,
        # but we want it in our API
        location ~ ^/api/v0/([a-z_]+)/([0-9]+)$ {
            proxy_set_header Accept 'application/vnd.pgrst.object+json';
            proxy_pass ${NGINX_UPSTREAM_BACKEND}/api/v0/$1?id=eq.$2;
        }

        # Redirect history nested endpoint
        # From <base>/<resource>/<id>/history
        # To   <base>/<resource>_history?<resource>_id=eq.<id>
        location ~ ^/api/v0/([a-z_]+)/([0-9]+)/history$ {
            return 307 /api/v0/$1_history?$1_id=eq.$2;
        }

        proxy_pass ${NGINX_UPSTREAM_BACKEND}/api/v0/;

        # We want response that matches the error_message schema in the OpenAPI spec
        proxy_intercept_errors on;
        # 500 : PostgREST returns plain text "Internal server error".
        error_page 500 /500.json;
        # 400 : PostgREST returns empty object "{}" when listing with filters.
        # TODO this hides the actual error message from PostgREST
        # so need to fix this in a better way.
        # error_page 404 /404.json;

    }

    #
    # Auth service
    #
    # The auth service/api lives at is own path, /auth
    # It has been separated by the main app since it is a separate service
    # and could be replaced by a different implementation/tool at some point.

    # Serving Elements OpenAPI documentation
    # on /auth/v0/
    location = /auth/v0/ {
        add_header 'Cache-Control' 'no-cache';
    }

    location = /auth/v0/index.html {
        add_header 'Cache-Control' 'no-cache';
    }

    location = /auth/v0/openapi.json {
        add_header 'Cache-Control' 'no-cache';
    }

    location /auth/v0/ {

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass ${NGINX_UPSTREAM_BACKEND};

    }

    error_page 400 /400.json;
    location = /400.json {
        return 400 '{"code":"400","message":"Bad Request"}';
    }

    error_page 401 /401.json;
    location = /401.json {
        return 401 '{"code":"401","message":"Unauthorized"}';
    }

    error_page 402 /402.json;
    location = /402.json {
        return 402 '{"code":"402","message":"Payment Required"}';
    }

    error_page 403 /403.json;
    location = /403.json {
        return 403 '{"code":"403","message":"Forbidden"}';
    }

    error_page 404 /404.json;
    location = /404.json {
        add_header 'Access-Control-Allow-Origin' '*';
        return 404 '{"code":"404","message":"Not Found"}';
    }

    error_page 405 /405.json;
    location = /405.json {
        return 405 '{"code":"405","message":"Method Not Allowed"}';
    }

    error_page 406 /406.json;
    location = /406.json {
        return 406 '{"code":"406","message":"Not Acceptable"}';
    }

    error_page 407 /407.json;
    location = /407.json {
        return 407 '{"code":"407","message":"Proxy Authentication Required"}';
    }

    error_page 408 /408.json;
    location = /408.json {
        return 408 '{"code":"408","message":"Request Timeout"}';
    }

    error_page 409 /409.json;
    location = /409.json {
        return 409 '{"code":"409","message":"Conflict"}';
    }

    error_page 410 /410.json;
    location = /410.json {
        return 410 '{"code":"410","message":"Gone"}';
    }

    error_page 411 /411.json;
    location = /411.json {
        return 411 '{"code":"411","message":"Length Required"}';
    }

    error_page 412 /412.json;
    location = /412.json {
        return 412 '{"code":"412","message":"Precondition Failed"}';
    }

    error_page 413 /413.json;
    location = /413.json {
        return 413 '{"code":"413","message":"Payload Too Large"}';
    }

    error_page 414 /414.json;
    location = /414.json {
        return 414 '{"code":"414","message":"URI Too Long"}';
    }

    error_page 415 /415.json;
    location = /415.json {
        return 415 '{"code":"415","message":"Unsupported Media Type"}';
    }

    error_page 416 /416.json;
    location = /416.json {
        return 416 '{"code":"416","message":"Range Not Satisfiable"}';
    }

    error_page 417 /417.json;
    location = /417.json {
        return 417 '{"code":"417","message":"Expectation Failed"}';
    }

    error_page 418 /418.json;
    location = /418.json {
        return 418 '{"code":"418","message":"I\'m a Teapot"}';
    }

    error_page 421 /421.json;
    location = /421.json {
        return 421 '{"code":"421","message":"Misdirected Request"}';
    }

    error_page 422 /422.json;
    location = /422.json {
        return 422 '{"code":"422","message":"Unprocessable Entity"}';
    }

    error_page 423 /423.json;
    location = /423.json {
        return 423 '{"code":"423","message":"Locked"}';
    }

    error_page 424 /424.json;
    location = /424.json {
        return 424 '{"code":"424","message":"Failed Dependency"}';
    }

    error_page 425 /425.json;
    location = /425.json {
        return 425 '{"code":"425","message":"Too Early"}';
    }

    error_page 426 /426.json;
    location = /426.json {
        return 426 '{"code":"426","message":"Upgrade Required"}';
    }

    error_page 428 /428.json;
    location = /428.json {
        return 428 '{"code":"428","message":"Precondition Required"}';
    }

    error_page 429 /429.json;
    location = /429.json {
        return 429 '{"code":"429","message":"Too Many Requests"}';
    }

    error_page 431 /431.json;
    location = /431.json {
        return 431 '{"code":"431","message":"Request Header Fields Too Large"}';
    }

    error_page 451 /451.json;
    location = /451.json {
        return 451 '{"code":"451","message":"Unavailable For Legal Reasons"}';
    }

    error_page 500 /500.json;
    location = /500.json {
        add_header 'Access-Control-Allow-Origin' '*';
        return 500 '{"code":"500","message":"Internal Server Error"}';
    }

    error_page 501 /501.json;
    location = /501.json {
        return 501 '{"code":"501","message":"Not Implemented"}';
    }

    error_page 502 /502.json;
    location = /502.json {
        return 502 '{"code":"502","message":"Bad Gateway"}';
    }

    error_page 503 /503.json;
    location = /503.json {
        return 503 '{"code":"503","message":"Service Unavailable"}';
    }

    error_page 504 /504.json;
    location = /504.json {
        return 504 '{"code":"504","message":"Gateway Timeout"}';
    }

    error_page 505 /505.json;
    location = /505.json {
        return 505 '{"code":"505","message":"HTTP Version Not Supported"}';
    }

    error_page 506 /506.json;
    location = /506.json {
        return 506 '{"code":"506","message":"Variant Also Negotiates"}';
    }

    error_page 507 /507.json;
    location = /507.json {
        return 507 '{"code":"507","message":"Insufficient Storage"}';
    }

    error_page 508 /508.json;
    location = /508.json {
        return 508 '{"code":"508","message":"Loop Detected"}';
    }

    error_page 510 /510.json;
    location = /510.json {
        return 510 '{"code":"510","message":"Not Extended"}';
    }

    error_page 511 /511.json;
    location = /511.json {
        return 511 '{"code":"511","message":"Network Authentication Required"}';
    }


}
