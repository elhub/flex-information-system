#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import yaml
import sys
import textwrap
import j2


def node(id, label, description, attr, style):
    wrapped_desc = textwrap.fill(description, width=max(20, len(label))).replace(
        "\n", "\\n"
    )
    return f"""    {id}    [label="{{{label}}}|{{{wrapped_desc}}}{"|{" + attr + "}" if attr else ""}" shape=record style={style}]"""


def edge(from_id, to_id, label):
    return f"""    {from_id} -> {to_id}     [label={label}]"""


if __name__ == "__main__":
    resources = yaml.safe_load(sys.stdin)
    resources = resources["resources"]

    comment_resources = []
    shift = 0
    for i, resource in enumerate(resources):
        if resource.get("comments"):
            comment_resource = yaml.safe_load(
                j2.template_str(resource, "comment_resource.j2.yml"),
            )["data"]
            comment_resources.append((i + 1 + shift, comment_resource))
            shift += 1

    for i, comment_resource in comment_resources:
        resources.insert(i, comment_resource)

    print("@startdot resources")
    print("digraph flex {")
    print(f"    // Generated by {sys.argv[0]}")
    print("    graph [ rankdir=LR; pad=0.5; nodesep=0.2; ranksep=-1;]")
    print("    node [ shape=record; ]")
    for resource in resources:
        resource_id = resource.get("id")

        label = resource_id
        attr = []
        if len(resource.get("history", [])) > 0:
            attr.append("🕰️")
        if resource.get("future"):
            attr.append("🛠️")

        description = resource.get("description", "").split("\n")[0]
        print(
            node(
                id=resource_id,
                label=label,
                description=description,
                attr=" ".join(attr),
                style="dashed" if resource.get("future") else "solid",
            )
        )

        for property_key, property in resource.get("properties").items():
            if property.get("x-foreign-key"):
                fk = property.get("x-foreign-key")

                print(
                    edge(from_id=resource_id, to_id=fk["resource"], label=property_key)
                )

    print("}")
    print("@enddot")
